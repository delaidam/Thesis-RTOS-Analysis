# Makefile for FreeRTOS on Picorv32 (Tang Nano 9K)
# Target: RISC-V GCC toolchain

# --- Toolchain Configuration ---
# Adjust this path if your RISC-V toolchain is not in /opt/riscv
# Assumes RISC-V GNU Toolchain is installed (e.g., in WSL: sudo apt install gcc-riscv64-unknown-elf)
# For RV32I, we generally use riscv64-unknown-elf-gcc, which supports both 32-bit and 64-bit targets.
TOOLCHAIN_PREFIX := riscv64-unknown-elf
CC := $(TOOLCHAIN_PREFIX)-gcc
AS := $(TOOLCHAIN_PREFIX)-as
LD := $(TOOLCHAIN_PREFIX)-ld
AR := $(TOOLCHAIN_PREFIX)-ar
OBJCOPY := $(TOOLCHAIN_PREFIX)-objcopy

# --- Project Paths ---
# Adjust these paths based on your actual directory structure
PROJECT_DIR := .
APP_DIR := $(PROJECT_DIR)/app
FREERTOS_DIR := $(PROJECT_DIR)/FreeRTOS/Source
PORT_BASE_DIR := $(FREERTOS_DIR)/portable/GCC/RISC-V

# --- Source Files ---
# Application sources
APP_SRCS := $(APP_DIR)/main.c \
            $(APP_DIR)/uart_driver.c \
            $(APP_DIR)/printf.c \
            $(APP_DIR)/crt0.S \
            $(APP_DIR)/string_utils.c

# FreeRTOS kernel sources
FREERTOS_SRCS := $(FREERTOS_DIR)/tasks.c \
                 $(FREERTOS_DIR)/queue.c \
                 $(FREERTOS_DIR)/list.c \
                 $(FREERTOS_DIR)/croutine.c \
                 $(FREERTOS_DIR)/event_groups.c \
                 $(FREERTOS_DIR)/stream_buffer.c \
                 $(FREERTOS_DIR)/timers.c \
                 $(FREERTOS_DIR)/portable/MemMang/heap_4.c

# FreeRTOS portable sources
PORT_SRCS := $(PORT_BASE_DIR)/port.c \
             $(PORT_BASE_DIR)/portASM.S

# Combine all source files
SRCS := $(APP_SRCS) $(FREERTOS_SRCS) $(PORT_SRCS)

# --- Object Files ---
# Create object files in a build directory
BUILD_DIR := $(PROJECT_DIR)/build
OBJS := $(patsubst %.c,$(BUILD_DIR)/%.o,$(patsubst %.S,$(BUILD_DIR)/%.o,$(SRCS)))

# --- Include Paths ---
INC_PATHS := -I$(FREERTOS_DIR)/include \
             -I$(PORT_BASE_DIR) \
			 -I$(APP_DIR) \
			 -I$(PORT_BASE_DIR)/chip_specific_extensions/RV32I_CLINT_no_extensions

# --- Compiler Flags ---
# RV32I specific flags
# -march=rv32i: Specify RISC-V 32-bit integer ISA
# -mabi=ilp32: Specify ABI for 32-bit integer (e.g., int, long, pointer are 32-bit)
# -nostdlib: Do not link with standard libraries (we provide our own crt0 and printf)
# -fno-builtin: Don't use GCC built-in functions
# -MMD: Generate dependency files
# -Wall -Wextra -pedantic: Enable warnings
# -Os: Optimize for size (good for embedded)
# -g: Include debug info
CFLAGS := -march=rv32i -mabi=ilp32 -nostdlib -fno-builtin -MMD -Wall -Wextra -pedantic -Os -g
ASFLAGS := -march=rv32i -mabi=ilp32 -g

# --- Linker Script ---
# You will need to create this file (e.g., linker.ld) in your app directory
LDSCRIPT := $(APP_DIR)/rv32.ld

# --- Linker Flags ---
LDFLAGS := -T$(LDSCRIPT) -nostdlib -static -Map=$(BUILD_DIR)/$(TARGET).map -LC:/SysGCC/risc-v/lib/gcc/riscv64-unknown-elf/10.1.0/rv32i/ilp32 -lgcc

# --- Target Executable ---
TARGET := freertos_picotiny_demo

.PHONY: all clean

all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).bin


# Rule to create build directory
$(BUILD_DIR):
	cmd /c mkdir $(subst /,\,$(BUILD_DIR)) 2>NUL || cd .
	cmd /c mkdir $(subst /,\,$(BUILD_DIR))\app 2>NUL || cd .
	# cmd /c mkdir $(subst /,\,$(BUILD_DIR))\FreeRTOS\Source\portable\GCC\RISC-V\chip_specific_extensions\RV32I_CLINT_no_extensions 2>NUL || cd .
	cmd /c mkdir $(subst /,\,$(BUILD_DIR))\FreeRTOS\Source 2>NUL || cd .
	
# Rule to compile C files
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) $(INC_PATHS) -c $< -o $@

# Rule to compile assembly files
$(BUILD_DIR)/%.o: %.S | $(BUILD_DIR)
	$(CC) $(CFLAGS) $(INC_PATHS) -c $< -o $@

# Rule to link ELF executable
$(BUILD_DIR)/$(TARGET).elf: $(OBJS) $(LDSCRIPT) | $(BUILD_DIR)
	$(LD) -T$(LDSCRIPT) -nostdlib -static -Map=$(BUILD_DIR)/$(TARGET).map $(OBJS) -LC:/SysGCC/risc-v/lib/gcc/riscv64-unknown-elf/10.1.0/rv32i/ilp32 -lgcc -o $@

# Rule to convert ELF to binary for flashing
$(BUILD_DIR)/$(TARGET).bin: $(BUILD_DIR)/$(TARGET).elf
	$(OBJCOPY) -O binary $< $@
	$(OBJCOPY) -O ihex $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex

# Clean up build artifacts
clean:
	rm -rf $(BUILD_DIR)

# Include dependency files (generated by -MMD)
-include $(OBJS:.o=.d)